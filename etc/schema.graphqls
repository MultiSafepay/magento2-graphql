# phpcs:ignoreFile
type Mutation {
    restoreQuote(input: RestoreQuoteInput): String @doc(description:"Restore MultiSafepay quote by masked Cart ID") @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\RestoreQuote")
    getPaymentMeta(input: RestoreQuoteInput): String @doc(description:"Restore MultiSafepay quote by masked Cart ID") @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\RestoreQuote")
}

type Query {
    multisafepayCart(cart_id: String!): Cart @resolver (class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\MultisafepayCart") @doc(description:"Returns information about shopping cart") @cache(cacheable: false)
    multisafepayPaymentRequestData(cart_id: String!): MultisafepayPaymentRequestDataOutput @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\PaymentComponentData") @cache(cacheable: false)
}

type Order {
  multisafepay_payment_url: MultisafepayPaymentUrl! @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\PaymentUrl")
}

type AvailablePaymentMethod {
    multisafepay_available_issuers: [MultisafepayIssuer!] @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\Issuer\\AvailableIssuersForPaymentMethod") @doc(description: "Available issuers for payment method")
    multisafepay_additional_data: MultisafepayAdditionalData! @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\AdditionalData") @doc(description: "Retrieve additional data for current payment method or giftcard")
}

type SelectedPaymentMethod {
    multisafepay_available_issuers: [MultisafepayIssuer!] @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\Issuer\\AvailableIssuersForPaymentMethod") @doc(description: "Available issuers for current payment method")
    multisafepay_additional_data: MultisafepayAdditionalData! @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\AdditionalData") @doc(description: "Retrieve additional data for current payment method or giftcard")
}

input RestoreQuoteInput {
    cart_id: String!
}

type CustomerOrder {
    multisafepay_payment_url: String! @resolver(class: "MultiSafepay\\ConnectGraphQl\\Model\\Resolver\\OrderPaymentUrl")
}

input PaymentMethodInput {
    multisafepay_mybank: MultisafepayIssuerInput @doc(description:"Required input for MultiSafepay MyBank payments")
    multisafepay_afterpay: MultisafepayAfterpayInput @doc(description:"Required input for MultiSafepay Afterpay payments")
    multisafepay_directbanktransfer: MultisafepayDirectbanktransferInput @doc(description:"Required input for Direct Bank Transfer payments")
    multisafepay_directdebit: MultisafepayDirectdebitInput @doc(description:"Required input for Direct Debit payments")
    multisafepay_einvoicing: MultisafepayEinvoicingInput @doc(description: "Required input type for E-Invoicing payments")
    multisafepay_in3: MultisafepayIn3Input @doc(description:"Required input for in3 payments")
    multisafepay_payafter: MultisafepayPayafterInput @doc(description:"Required input type for Pay After Delivery payments")
    multisafepay_creditcard: MultisafepayPaymentComponentInput @doc(description:"Required input for Credit Card payments")
    multisafepay_maestro: MultisafepayPaymentComponentInput @doc(description:"Required input for Maestro payments")
    multisafepay_visa: MultisafepayPaymentComponentInput @doc(description:"Required input for Visa payments")
    multisafepay_amex: MultisafepayPaymentComponentInput @doc(description:"Required input for Amex payments")
    multisafepay_mastercard: MultisafepayPaymentComponentInput @doc(description:"Required input for Mastercard payments")
}

input MultisafepayIssuerInput @doc(description:"Required input for MultiSafepay MyBank payments") {
    issuer_id: String @doc(description:"The MyBank issuer id")
}

input MultisafepayIn3Input @doc(description:"Required input for MultiSafepay in3 payments") {
    gender: String! @doc(description:"Gender of the customer")
}

input MultisafepayAfterpayInput @doc(description:"Required input for MultiSafepay Afterpay payments") {
    date_of_birth: String! @doc(description:"Date of Birth of the customer")
    gender: String! @doc(description:"Gender of the customer")
    phone_number: String! @doc(description:"Phone number of the customer")
    afterpay_terms: String! @doc(description:"Afterpay terms and conditions acceptance")
}


input MultisafepayPayafterInput @doc(description:"Required input type for Pay After Delivery payments") {
    date_of_birth: String! @doc(description:"Date of Birth of the customer")
    account_number: String! @doc(description:"Customer account number")
}

input MultisafepayEinvoicingInput @doc(description:"Required input type for E-Invoicing payments") {
    date_of_birth: String @doc(description:"Date of Birth of the customer")
    account_number: String @doc(description:"Customer account number")
    email_address: String @doc(description:"Customer email address")
}

input MultisafepayDirectdebitInput @doc(description:"Required input for Direct Debit payments") {
    account_holder_name: String! @doc(description:"Holder Name of the customer")
    account_holder_iban: String! @doc(description:"Holder IBAN of the customer")
}

input MultisafepayDirectbanktransferInput @doc(description:"Required input for Direct Bank Transfer payments") {
    account_id: String! @doc(description:"Account ID of the customer")
    account_holder_name: String! @doc(description:"Holder Name of the customer")
    account_holder_city: String! @doc(description:"Holder City of the customer")
    account_holder_country: String! @doc(description:"Holder Country of the customer")
    account_holder_iban: String! @doc(description:"Holder IBAN of the customer")
    account_holder_bic: String! @doc(description:"Holder BIC of the customer")
}

type MultisafepayPaymentUrl {
    payment_url: String
    error: String
}

type MultisafepayIssuer {
    code: String
    description: String
}

type MultisafepayAdditionalData {
    image: String
    is_preselected: Boolean
    instructions: String
}

type PaymentMethod @doc(description: "Get meta data for MultiSafepay payment methods in ScandiPWA queries") {
    multisafepay_available_issuers: [MultisafepayIssuer!]
    multisafepay_additional_data: MultisafepayAdditionalData!
}

input PaymentMethodAdditionalData @doc(description: "Defines additional payment data for ScandiPWA queries")  {
    issuer_id: String!
    date_of_birth: String!
    gender: String!
    account_number: String!
    account_holder_name: String!
    account_holder_iban: String!
    account_id: String!
    account_holder_city: String!
    account_holder_country: String!
    account_holder_bic: String!
}

input PlaceOrderInput @doc(description: "Specifies the quote to be converted to an order.") {
    cart_id: String! @doc(description: "The unique ID of a `Cart` object.")
    application_name: String @doc(description: "Application name")
    application_version: String @doc(description: "Application version")
    plugin_version: String @doc(description: "Plugin version")
}

input MultisafepayPaymentComponentInput @doc(description:"Required input for Payment Component") {
    payload: String! @doc(description:"Payload")
    tokenize: Boolean! @doc(description:"Tokenization enabled")
}

type MultiSafepayPaymentComponentAdditionalInfo
{
    vaultCode: String
    image: String
    is_preselected: Boolean
}

type MultiSafepayToken
{
    token: String
    code: String
    display: String
    bin: Int
    name_holder: String
    expiry_date: Int
    expired: Boolean
    last4: Int
    model: String
}

type MultiSafepayPaymentComponentConfig
{
    paymentMethod: String
    gatewayCode: String
    paymentType: String
    tokens: [MultiSafepayToken]
    additionalInfo: MultiSafepayPaymentComponentAdditionalInfo
}

type MultiSafepayApplePayButton
{
    isActive: Boolean
    applePayButtonId: String
    getMerchantSessionUrl: String
    cartItems: [MultiSafepayApplePayCartItem]
    additionalTotalItems: [MultiSafepayApplePayAdditionalTotalItem]
}

type MultiSafepayGooglePayButton
{
    isActive: Boolean
    googlePayButtonId: String
    mode: String
    accountId: String
    merchantInfo: MultiSafepayMerchantInfo
}

type MultiSafepayApplePayCartItem
{
    label: String
    price: Float
}

type MultiSafepayApplePayAdditionalTotalItem
{
    label: String
    amount: String
}

type MultiSafepayMerchantInfo
{
    merchantName: String
    merchantId: String
}

type MultisafepayPaymentRequestDataOutput
{
    environment: String
    locale: String
    cartTotal: Float
    currency: String
    storeId: Int
    payment_component_template_id: String
    paymentComponentContainerId: String
    paymentComponentConfig: [MultiSafepayPaymentComponentConfig]
    apiToken: String
    apiTokenLifeTime: Int
    applePayButton: MultiSafepayApplePayButton
    googlePayButton: MultiSafepayGooglePayButton
}
